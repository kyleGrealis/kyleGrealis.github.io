[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Warning:\nThis page is under construction!"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "How to scrape Google Scholar using {httr2}\n\n\n\nR\n\n\nhttr2\n\n\nwebscraping\n\n\n\n\n\n\n\nKyle Grealis\n\n\nMar 11, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreating a Quarto website hero panel\n\n\n\nR\n\n\nQuarto\n\n\nSCSS\n\n\n\n\n\n\n\nKyle Grealis\n\n\nMar 4, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2024-02-21-creating-quarto-hero.html",
    "href": "posts/2024-02-21-creating-quarto-hero.html",
    "title": "Creating a Quarto website hero panel",
    "section": "",
    "text": "Let’s explore creating a hero panel in Quarto using some raw HTML code and SCSS styling tweaks."
  },
  {
    "objectID": "posts/2024-02-21-creating-quarto-hero.html#what-is-a-hero-panel",
    "href": "posts/2024-02-21-creating-quarto-hero.html#what-is-a-hero-panel",
    "title": "Creating a Quarto website hero panel",
    "section": "What is a hero panel?",
    "text": "What is a hero panel?\nWe’ve all seen them, but may not have known what to call them. They’re the image that sits usually at the top of a home page. They’re designed to immediately draw your eyes to purpose and main message of the site. Hero panels, also referred to as “hero sections” or “hero images”, have evolved from the newspaper printing concept of “above the fold”. When you see a newspaper, you’re immediately drawn to what the editors intended for you to see first: a bold headline and image. The hope is that it compels you to pick it up and read on.\nIn web design, the hero panel is situated “above the fold”, but instead, this format requires our content to be visible without scrolling. We’re going to create a hero panel in a Quarto HTML document. We’ll also use some simple HTML create the initial layout, and then write some SCSS to style our panel and place the text where we want.\n\n\n\n\n\n\nIf you’re interested in learning more about HTML and CSS, a resource that I used and still often reference is W3 Schools. They have free content consisting of bite-sized tutorials to quickly get your feet wet."
  },
  {
    "objectID": "posts/2024-02-21-creating-quarto-hero.html#lets-build",
    "href": "posts/2024-02-21-creating-quarto-hero.html#lets-build",
    "title": "Creating a Quarto website hero panel",
    "section": "Let’s build!",
    "text": "Let’s build!\n\nThis is the hero panel that we will be recreating. Now, I have to give the disclaimer that this is but one of a multitude of ways to achieve the same goal. For me, this was the easiest as it uses minimal HTML and CSS. I’m going to assume that you know what HTML elements and tags are. If you don’t, the short and sweet: elements are the Lego blocks used to build your site or document and tags are the instructions for the browser to know what the element is and where to put it. Tags are identified by their &lt;&gt; brackets surrounding things like &lt;h1&gt; or &lt;img&gt;.\n\nOne small package\nUsing the lorem package can quickly render content to help visualize your layout. Later, you can go back and add what will ultimately be final version. As you can see, it’s that Latin text that is composing the paragraphs below the hero panel. Let’s download it now:\n\ninstall.packages('lorem')\n\n\n\nTime for Quarto\nYou need to have Quarto installed. Download the latest version here if you need it. In RStudio, click File &gt;&gt; New File &gt;&gt; Quarto Document to create a new Quarto file. Select HTML, leave the document untitled, uncheck Editor: Use visual markdown editor, and lastly Create Empty Document.\n\n\n\nModify the YAML header\nLet’s make a few changes in the YAML header. To reproduce our example image, let’s remove the title so that we can place the hero image directly at the top of the document. If you’re using this tutorial for adding hero panel to your Quarto website, leave the title as that area will be occupied by the navigation bar. Adding embed-resources: true creates a standalone HTML file that incorporates necessary images, stylesheets, and JavaScript without relying on external files. This can increase accessibility of the file. Finally, we’re going to create layout-styles.scss for styling and positioning HTML elements, so let’s add that here.\n---\ntitle: \"\"\nformat: \n  html:\n    embed-resources: true\ntheme: layout-styles.scss\n---\n\n\nAdding raw HTML to Quarto\nAgain, for me, this was the simplest method to create a hero panel. Under the YAML, add in this HTML:\n---\ntitle: \"\"\nformat: \n  html:\n    embed-resources: true\ntheme: layout-styles.scss\n---\n\n&lt;!----- start hero panel --------&gt;\n\n```{=html}\n&lt;div class=\"hero-panel column-screen\"&gt;\n  &lt;img class=\"banner\" src=\"banner.jpg\" alt=\"Banner Image\"&gt;\n  &lt;div class=\"banner-text\"&gt;\n    &lt;h1&gt;Learning Quarto Layout Tricks&lt;/h1&gt;\n    &lt;h3&gt;This is the hero panel&lt;/h3&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n```\n\n&lt;!----- end hero panel ----------&gt;\n\n\nBreaking this down, a div element is a container that holds something. Adding one or more classes to a div helps to “find” this element when we add some styles to it. The div class=\"hero-panel column-screen\" is our main container. Within that div, you can see our img and another div holding our text in the h1 and h3 elements. A cool trick that I learned was setting class=\"column-screen\" in Quarto allows the div to occupy the entire viewport! That’s great because it helps make our styling that much easier.\n\n\nStyle it out\nWe just modified the YAML header by pointing to our stylesheet, layout-styles.scss. We’re going to use a SCSS file as opposed to CSS because it will give you a little more freedom later on in your project to write your styling to be more readable, if nothing else.\nCreate layout-styles.scss and let’s add some content. When we write the styles, we can format it in much the same way that we described the aspect of container: we can format the SCSS so that it gives the appearance that our styles are “contained” within other parts of the code. Here, let me show you what I mean:\n// Set up the hero panel\n.hero-panel {\n  // This is required. Think of it like a family unit where they are \"relative\"s\n  position: relative;\n  \n  img.banner {\n    width: 100%;\n    height: 350px;\n  }\n  \n  .banner-text {\n    position: absolute;\n    left: 5%;\n    bottom: 20%;\n    color: white;\n    font-weight: bold;\n  }\n}\nOur main container for our hero panel’s content lives inside the container that we gave the class hero-panel when we wrote the raw HTML. Now if you look at the SCSS that we added, img.banner is written inside of the {} braces for .hero-panel. This is “nesting” where one element’s CSS code can be read by human eyes as existing within another element. In our case, you’ll notice that both img.banner and banner-text are nested inside of .hero-panel.\n\n\n\n\n\n\nTwo quick things: you can identify a class that was written in HTML within the SCSS (or CSS) code because they’ll start with a . like in .hero-panel. Also, img.banner is an image (img) with the class of banner… put it together and you have img.banner for the SCSS.\n\n\n\nThe most difficult concept for me to initially grasp was this idea of position: relative; versus position: absolute;. I bet there will be much more technical and better ways of explaining this talking about the document flow and whatnot, but our main container, .hero-panel has “child” elements inside that we’re using as well. To be less technical about it, what we’re concerned with is that its elements are “related” to it, so we’ll give .hero-panel the position: relative.\nThere are only a few children within our parent container: the image and some text. Referring back to the HTML that we wrote and armed with the understanding that using proper indentation can help visually group elements for readability, our text container was given the class banner-text. Adding the . for our SCSS now, we’re going to give .banner-text the position: absolute. Why? Changing its position to absolute can be thought of this way: a parent can pick up a child and absolutely put that child where they want. For us, we want parent (hero-panel) to move its child (banner-text) where it wants to put it…ugh, where we want to put it. Gosh, I hope that made sense.\nWe’re going to move all of the text inside banner-text starting from the left and moving to the middle 5%. I recommend using percentages as opposed to pixels (px) because this could help when your page is rendered on different size screens. I’m sure now you can guess that bottom: 20%; moves the position of the text elements up 20% from the bottom. You can also use right and top for positioning elements absolutely too, but we just don’t use them that way in our example.\nThe final part is that we want our text to have the color: white; and we want it to stand out a little more, so let’s make font-weight: bold;.\n\n\nIs that it?!\nYou can complete the look by adding a H2 header (using two ## in Quarto) for “Words in Latin…”. Then add a r code block with lorem::ipsum(paragraphs = 3) to fill in the rest of the space.\nViola! That should do it. But be sure to look for other ways to add more styling to your text or image for the hero panel. You can add shadowing effects to the text, you can make the image appear a little darker, or you can even blur the background image if that fits the idea you have. There are endless possibilities and I’m constantly learning and improving.\nTo be honest, I hope that I reread this post in a few months and immediately want to rewrite this to be even clearer or explained better. For now, this is where I am and I hope I was able to share something with you.\nThank you for your time and check back soon!"
  },
  {
    "objectID": "posts/2024-02-21-creating-quarto-hero.html#happy-coding",
    "href": "posts/2024-02-21-creating-quarto-hero.html#happy-coding",
    "title": "Creating a Quarto website hero panel",
    "section": "Happy coding!",
    "text": "Happy coding!"
  },
  {
    "objectID": "posts/2024-02-15-how-to-scrape-google-scholar.html",
    "href": "posts/2024-02-15-how-to-scrape-google-scholar.html",
    "title": "How to scrape Google Scholar using {httr2}",
    "section": "",
    "text": "Intro\nThis is a walkthrough on webscraping Google Scholar using SerpApi. This guide will show how to obtain a free API key allowing you to gather author publications and other information from Google Scholar. We’ll also go over how to securely store the API key in a .env file and how to access the key from the .env file.\n\n\n\nPrerequisites\nNavigate to the SerpApi website and register for a free account. You can sign in using your email or GitHub. After you register and confirm your email address, you will receive a secret key located towards the bottom of the screen.\n\n\n\nSerpApi key\n\n\nCreate a .env file in your project repo. You’ll want to immediately add that to your .gitignore file before you even commit the .env file to your repo. You do not want to make the mistake of scripting your secret key into your files or forget to do it later. In the .env file, add the following line:\n# my google scholar api key\nGOOGLE_KEY=\"&lt;your_secret_key_provided_when_you_registered&gt;\"\n\n\n\n\n\n\n\nNote\n\n\n\nEnd your .env file with a newline. This will save you a minor warning later on.\n\n\nNow you should save the file and commit it to your project repo.\n\n** Stay tuned… coming back with more! **"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kyle Grealis",
    "section": "",
    "text": "I’m a Biostatistician and Lead Data Analyst at the University of Miami. I spent nearly 20 years as a respiratory therapist before discovering the world of data science and its importance on healthcare. Attention to detail is as critical a skill in bedside care as it is in data analysis.\nI’ve been fortunate to work with some great physicians and researchers in the field of pulmonary medicine, and I’ve recently transitioned to the Department of Public Health Sciences at the University of Miami. Currently, we are developing machine learning algorithms to predict individual relapse in those affected by the opioid epidemic.\nI’m excited about data science and the potential it has to improve healthcare and outcomes. This website is a collection of my work: web applications that I’ve developed to better our understanding of epidemiology and biostatistics, and a blog where I share what I’m learning along the way. Let’s come together to grow the fields of data science and healthcare."
  },
  {
    "objectID": "index.html#hey-there-im-kyle-grealis",
    "href": "index.html#hey-there-im-kyle-grealis",
    "title": "Kyle Grealis",
    "section": "",
    "text": "I’m a Biostatistician and Lead Data Analyst at the University of Miami. I spent nearly 20 years as a respiratory therapist before discovering the world of data science and its importance on healthcare. Attention to detail is as critical a skill in bedside care as it is in data analysis.\nI’ve been fortunate to work with some great physicians and researchers in the field of pulmonary medicine, and I’ve recently transitioned to the Department of Public Health Sciences at the University of Miami. Currently, we are developing machine learning algorithms to predict individual relapse in those affected by the opioid epidemic.\nI’m excited about data science and the potential it has to improve healthcare and outcomes. This website is a collection of my work: web applications that I’ve developed to better our understanding of epidemiology and biostatistics, and a blog where I share what I’m learning along the way. Let’s come together to grow the fields of data science and healthcare."
  }
]