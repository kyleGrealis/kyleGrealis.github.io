{
  "hash": "2746d44f779a512c65d6d0f2cabc9c74",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Setting Up a Python or R Project with Docker\"\n# image: /static/images/posts/knn-gist.png\nauthor: \"Kyle Grealis\"\ndate: May 14, 2024\ncategories:\n  - Python\n  - R\n  - Docker\n  - Data science\nformat: \n  html:\n    embed-resources: true\n    code-fold: false\n    code-copy: true\nexecute:\n  warning: false\n  message: false\n  eval: false\n---\n\nThis guide will walk you through the process of setting up a Python or R project with Docker. This is particularly useful for data science projects where you need to ensure that your code runs in a consistent environment.\n\n## Step 1: Organize Your Python Scripts\n\nOrganize your Python scripts so that each script is responsible for a specific part of your project. For example:\n\n- `import_and_clean.py`: Responsible for importing and cleaning your data.\n- `explore.py`: Responsible for exploring your data (e.g., generating descriptive statistics, creating visualizations).\n- `modeling.py`: Responsible for building and evaluating your models.\n- `create_api.py`: Responsible for creating an API for your model (if applicable).\n\n## Step 2: Create a Main Script\n\nCreate a main script that imports and runs the functions from your other scripts in the necessary order. For example:\n\n::: {#a02ae10c .cell execution_count=1}\n``` {.python .cell-code}\n# main.py\n\n# Import the functions from your other scripts\nfrom import_and_clean import import_and_clean\nfrom explore import explore\nfrom modeling import modeling\nfrom create_api import create_api\n\ndef main():\n    # Call the functions in the necessary order\n    import_and_clean()\n    explore()\n    modeling()\n    create_api()\n\nif __name__ == \"__main__\":\n    main()\n```\n:::\n\n\n## Step 3: Create a requirements.txt File\n\nCreate a `requirements.txt` file that lists the Python packages your project depends on. You can generate it by running `pip freeze > requirements.txt` in your virtual environment.\n\n## Step 4: Create a Dockerfile\n\nCreate a Dockerfile that sets up the environment for your project. Here's an example:\n\n\n```{bash}\n# Use an official Python runtime as a parent image\nFROM python:3.12-slim-buster\n\n# Set the working directory in the container to /app\nWORKDIR /app\n\n# Add the current directory contents into the container at /app\nADD . /app\n\n# Install any needed packages specified in requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Run main.py when the container launches\nCMD [\"python\", \"main.py\"]\n```\n\n\n## Step 5: Build and Run Your Docker Container\n\nTo build the Docker image, run the following command in your project directory (the same directory where the Dockerfile is located):\n\nTo run the Docker container, run the following command:\n\n\n```{bash}\ndocker build -t your-image-name .\n```\n\n```{bash}\ndocker run your-image-name\n```\n\n\nThis will run your Python script in a Docker container with an environment that matches the one specified in your Dockerfile.\n\n## Step 6: If Building a project in R\n\n### Create a Dockerfile\n\n1. **Docker Base Image:** Instead of using a Python base image, you'd use an R base image. For example, you might use `FROM r-base:4.1.0` to use R version 4.1.0.\n    \n2. **Installing Packages:** Instead of using a `requirements.txt` file and `pip install`, you'd install R packages using the `install.packages()` function in R. You can do this directly in your Dockerfile. For example:\n\n\n```{bash}\nRUN R -e \"install.packages(c('dplyr', 'ggplot2'), repos='http://cran.rstudio.com/')\"\n```\n\n\n3. **Running Your Script:** Instead of running a Python script, you'd run an R script. For example:\n\n\n```{bash}\nCMD [\"Rscript\", \"your_script.R\"]\n```\n\n\nHere's what a full Dockerfile might look like for an R project:\n\n\n```{bash}\n# Use an official R runtime as a parent image\nFROM r-base:4.4.0\n\n# Set the working directory in the container to /app\nWORKDIR /app\n\n# Add the current directory contents into the container at /app\nADD . /app\n\n# Install any needed packages\nRUN R -e \"install.packages(c('dplyr', 'ggplot2'), repos='http://cran.rstudio.com/')\"\n\n# Run your_script.R when the container launches\nCMD [\"Rscript\", \"your_script.R\"]\n```\n\n\nAs with the Python example, if you have multiple R scripts that need to be run in a specific order, you can create a main R script that sources and runs your other scripts in the necessary order, and call that script in the `CMD` line.\n\n----\n\n[Happy coding!]{style='font-size: 2rem;'}\n\n[~Kyle]{style='font-size: 2rem; font-weight: bold'}\n\n",
    "supporting": [
      "2024-05-14-using-docker-python-r_files"
    ],
    "filters": [],
    "includes": {}
  }
}