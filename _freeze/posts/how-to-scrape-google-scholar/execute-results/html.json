{
  "hash": "09ddbc3977fa1eca5d1bc499f743f835",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How to scrape Google Scholar using {httr2}\"\nimage: \"../static/images/google-scholar.png\"\nauthor: \"Kyle Grealis\" \ndate: \"February 15, 2024\"\ncategories:\n  - R\n  - API\n  - webscraping\nformat: \n  html:\n    self-contained: true\n    code-fold: false\nexecute:\n  warning: false\n  message: false\n---\n\n\n# Intro\nThis is a guide on how to scrape Google Scholar using SerpApi. This guide will show how to first obtain a free API key that will allow you to obtain the author publications and information from Google Scholar. We'll also go over how to securely store the API key in a `.env` file and how to access the key from the `.env` file.\n\n<hr>\n\n# Prerequisites\nNavigate to the [SerpApi](https://serpapi.com/users/sign_up) website and register for a free account. You can sign in using your email or GitHub. After you register and confirm your email address, you will receive a secret key located towards the bottom of the screen.\n\n![SerpApi key](../static/images/serpapi-key.png)\n\nCreate a `.env` file in your project repo. You'll want to immediately add that to your `.gitignore` file before you even commit the `.env` file to your repo. You do not want to make the mistake of scripting your secret key into your files or forget to do it later. In the `.env` file, add the following line:\n\n\n::: {.cell}\n\n```{.text .cell-code}\n# my google scholar api key\nGOOGLE_KEY=<your_secret_key_provided_when_you_registered>\n\n```\n:::\n\n\n::: { .callout-note }\nEnd your `.env` file with a newline. This will save you a minor warning later on.\n:::\n\nNow you should save the file and commit it to your project repo.\n\n<hr>\n\n# Installing the necessary packages\n\nThe following packages are necessary to run the code in this guide:\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# this will install the necessary packages if you don't already have them\nif (!require(\"dotenv\")) install.packages(\"dotenv\")\n\n# load the packages\nlibrary(tidyverse)\nlibrary(httr2)\n```\n:::\n\n\nTime to load the secret key you just created and added to the `.env` file. The `dotenv` package will allow you to load the secret key from the `.env` file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# this will load your free secret key to access the Serpapi API\ndotenv::load_dot_env()\n```\n:::\n\n\n<hr>\n\n# Scraping Google Scholar\n\nThe base URL needed to begin Google Scholar searches comes from the same site that we used to get our access key: [https://serpapi.com/google-scholar-api](https://serpapi.com/google-scholar-api). You will notice that they provide you with guides for accessing Google Scholar information on authors, cites, organic results, and profiles. Unfortunately, none of those guides include how to obtain your desired information using R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# save the URL for easier scripting\nurl <- \"https://serpapi.com/search.json?engine=google_scholar\"\n```\n:::\n\n\n<br>\n\n## Get the author's unique ID\n\nThe first step that we're going to do is obtain an author's unique ID. This will allow us to be certain of the other results we are planning to obtain. You may search for an author and find out that there are multiple authors with the same name. Google Scholar provides each registered author with a unique ID, so we'll grab and store that.\n\nThe `httr2` package's `request` function will allow us to make a request to the Serpapi API. We'll use the `req_url_query` function to add the necessary parameters to the URL. We need to use the `google_scholar_profiles` search engine and enter my name into the `mauthors` field. The last argument is the secret key that we stored in the `.env` file. The `req_perform()` function will execute the request and store the response in the `id_response` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid_response <- request(url) |>\n  req_url_query(\n    engine = \"google_scholar_profiles\",\n    mauthors = \"Kyle Grealis\",\n    # this will call on your secret key from the .env file\n    key = Sys.getenv(\"GOOGLE_KEY\")\n  ) |>\n  req_perform()\n```\n:::\n\n\nIf we take a few peeks at what is returned in the `response` object, we can see that the `id_response` object is a list of lists. The `resp_body_json` function will allow us to convert the response to a list of lists. The `glimpse` function will allow us to see the structure of the list of lists.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid_response |>\n  resp_body_json() |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 3\n $ search_metadata  :List of 8\n  ..$ id                         : chr \"65ce811c1c450a1604e830b6\"\n  ..$ status                     : chr \"Success\"\n  ..$ json_endpoint              : chr \"https://serpapi.com/searches/0f89992b69d5b4f3/65ce811c1c450a1604e830b6.json\"\n  ..$ created_at                 : chr \"2024-02-15 21:24:44 UTC\"\n  ..$ processed_at               : chr \"2024-02-15 21:24:44 UTC\"\n  ..$ google_scholar_profiles_url: chr \"https://scholar.google.com/citations?mauthors=Kyle+Grealis&view_op=search_authors&hl=en\"\n  ..$ raw_html_file              : chr \"https://serpapi.com/searches/0f89992b69d5b4f3/65ce811c1c450a1604e830b6.html\"\n  ..$ total_time_taken           : num 1.57\n $ search_parameters:List of 3\n  ..$ engine  : chr \"google_scholar_profiles\"\n  ..$ mauthors: chr \"Kyle Grealis\"\n  ..$ hl      : chr \"en\"\n $ profiles         :List of 1\n  ..$ :List of 8\n  .. ..$ name        : chr \"Kyle Grealis\"\n  .. ..$ link        : chr \"https://scholar.google.com/citations?hl=en&user=sdB7YAkAAAAJ\"\n  .. ..$ serpapi_link: chr \"https://serpapi.com/search.json?author_id=sdB7YAkAAAAJ&engine=google_scholar_author&hl=en\"\n  .. ..$ author_id   : chr \"sdB7YAkAAAAJ\"\n  .. ..$ affiliations: chr \"University of Miami\"\n  .. ..$ email       : chr \"Verified email at miami.edu\"\n  .. ..$ cited_by    : NULL\n  .. ..$ thumbnail   : chr \"https://scholar.googleusercontent.com/citations?view_op=small_photo&user=sdB7YAkAAAAJ&citpid=1\"\n```\n\n\n:::\n:::\n\n\nBut really-- what is that mess? Well, it's all of the information that is returned from the call to the API. We see that my name is listed in the `..$ mauthors: chr \"Kyle Grealis\"` line and again in `..$ name       : chr \"Kyle Grealis\"`. Looking down a few more lines and we'll see exactly what we're looking for: the `author_id`. I can confirm that this is my profile because we also notice that my `affiliation` is listed as \"University of Miami\". However, I'm sure you can see that if you find yourself, as mentioned above, searching for an author with a common name and are not familiar with their affiliations, you may have to do some more digging to find the correct author.\n\nWe can move on and use the `pluck` function to grab the `author_id` from the list and save it into an object of the same name. Later, I'm going to use this same technique to scrape information for the other members of my research team as I construct and update our team website.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nauthor_id <- id_response |>\n  resp_body_json() |>\n  pluck(\"profiles\", 1, \"author_id\")\n\nauthor_id\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sdB7YAkAAAAJ\"\n```\n\n\n:::\n:::\n\n\nAnd, see... it's a match to the `author_id` that we saw in the `glimpse` output. Now that we have the `author_id`, we can use it in the second part to obtain the author's publications and information.\n\n<br>\n\n## Get the author's list of publications\n\nWe're now going to repeat a little of what we did above, but this time we'll be using the `google_scholar_author` search engine and the `author_id` that we just obtained.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nauthor_response <- request(url) |>\n  req_url_query(\n    engine = \"google_scholar_author\",\n    author_id = author_id,\n    # this will call on your secret key from the .env file\n    key = Sys.getenv(\"GOOGLE_KEY\")\n  ) |>\n  req_perform()\n```\n:::\n\n\nAgain, we'll have a look at what the API call returns to us (but I've hidden the output because it's a lot of information). We'll use the `resp_body_json` function to convert the response to a list of lists and the `glimpse` function to see the structure of the list of lists.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nauthor_response |>\n  resp_body_json() |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 4\n $ search_metadata  :List of 8\n  ..$ id                       : chr \"65ce811e351764cac3d0fc59\"\n  ..$ status                   : chr \"Success\"\n  ..$ json_endpoint            : chr \"https://serpapi.com/searches/c6519901d3c18b24/65ce811e351764cac3d0fc59.json\"\n  ..$ created_at               : chr \"2024-02-15 21:24:46 UTC\"\n  ..$ processed_at             : chr \"2024-02-15 21:24:46 UTC\"\n  ..$ google_scholar_author_url: chr \"https://scholar.google.com/citations?user=sdB7YAkAAAAJ&hl=en\"\n  ..$ raw_html_file            : chr \"https://serpapi.com/searches/c6519901d3c18b24/65ce811e351764cac3d0fc59.html\"\n  ..$ total_time_taken         : num 0.49\n $ search_parameters:List of 3\n  ..$ engine   : chr \"google_scholar_author\"\n  ..$ author_id: chr \"sdB7YAkAAAAJ\"\n  ..$ hl       : chr \"en\"\n $ author           :List of 4\n  ..$ name        : chr \"Kyle Grealis\"\n  ..$ affiliations: chr \"University of Miami\"\n  ..$ email       : chr \"Verified email at miami.edu\"\n  ..$ thumbnail   : chr \"https://scholar.googleusercontent.com/citations?view_op=view_photo&user=sdB7YAkAAAAJ&citpid=1\"\n $ articles         :List of 9\n  ..$ :List of 7\n  .. ..$ title      : chr \"A comparative study of bronchodilator response: utilizing pre-bronchodilator versus predicted normal values\"\n  .. ..$ link       : chr \"https://scholar.google.com/citations?view_op=view_citation&hl=en&user=sdB7YAkAAAAJ&citation_for_view=sdB7YAkAAAAJ:qjMakFHDy7sC\"\n  .. ..$ citation_id: chr \"sdB7YAkAAAAJ:qjMakFHDy7sC\"\n  .. ..$ authors    : chr \"A Alexis, NM Punjabi, K Grealis, A Wanner\"\n  .. ..$ publication: chr \"BMC Pulmonary Medicine 24 (1), 54, 2024\"\n  .. ..$ cited_by   :List of 1\n  .. ..$ year       : chr \"2024\"\n  ..$ :List of 7\n  .. ..$ title      : chr \"Ventilation heterogeneity from X-ray Velocimetry predicts COPD severity\"\n  .. ..$ link       : chr \"https://scholar.google.com/citations?view_op=view_citation&hl=en&user=sdB7YAkAAAAJ&citation_for_view=sdB7YAkAAAAJ:u-x6o8ySG0sC\"\n  .. ..$ citation_id: chr \"sdB7YAkAAAAJ:u-x6o8ySG0sC\"\n  .. ..$ authors    : chr \"S Raju, K Grealis, E Gonzalez, K Nakrani, T Otvas, J Kirkness, A Fouras, ...\"\n  .. ..$ publication: chr \"European Respiratory Journal 62 (suppl 67), 2023\"\n  .. ..$ cited_by   :List of 1\n  .. ..$ year       : chr \"2023\"\n  ..$ :List of 7\n  .. ..$ title      : chr \"Quantifying ventilation by X-ray velocimetry in healthy adults\"\n  .. ..$ link       : chr \"https://scholar.google.com/citations?view_op=view_citation&hl=en&user=sdB7YAkAAAAJ&citation_for_view=sdB7YAkAAAAJ:u5HHmVD_uO8C\"\n  .. ..$ citation_id: chr \"sdB7YAkAAAAJ:u5HHmVD_uO8C\"\n  .. ..$ authors    : chr \"T Siddharthan, K Grealis, JP Kirkness, T Ötvös, D Stefanovski, ...\"\n  .. ..$ publication: chr \"Respiratory Research 24 (1), 215, 2023\"\n  .. ..$ cited_by   :List of 1\n  .. ..$ year       : chr \"2023\"\n  ..$ :List of 7\n  .. ..$ title      : chr \"The Association Between Sleep Hygiene and Cessation of Cigarette Smoking\"\n  .. ..$ link       : chr \"https://scholar.google.com/citations?view_op=view_citation&hl=en&user=sdB7YAkAAAAJ&citation_for_view=sdB7YAkAAAAJ:zYLM7Y9cAGgC\"\n  .. ..$ citation_id: chr \"sdB7YAkAAAAJ:zYLM7Y9cAGgC\"\n  .. ..$ authors    : chr \"DM Moore, K Grealis, E Gonzalez, T Siddharthan, NM Punjabi, AR Abreu\"\n  .. ..$ publication: chr \"A36. SLEEP-RELATED HEALTH SERVICES RESEARCH, A1433-A1433, 2023\"\n  .. ..$ cited_by   :List of 1\n  .. ..$ year       : chr \"2023\"\n  ..$ :List of 7\n  .. ..$ title      : chr \"Validation of X-ray Velocimetry With Pneumotachograph to Assess Respiratory Physiology\"\n  .. ..$ link       : chr \"https://scholar.google.com/citations?view_op=view_citation&hl=en&user=sdB7YAkAAAAJ&citation_for_view=sdB7YAkAAAAJ:IjCSPb-OGe4C\"\n  .. ..$ citation_id: chr \"sdB7YAkAAAAJ:IjCSPb-OGe4C\"\n  .. ..$ authors    : chr \"AE Tombleson, K Grealis, T Otvos, JP Kirkness, A Fouras, NM Punjabi, ...\"\n  .. ..$ publication: chr \"A17. TELL ME WHAT YOU SEE: NEW STUDIES IN LUNG IMAGING, A1045-A1045, 2023\"\n  .. ..$ cited_by   :List of 1\n  .. ..$ year       : chr \"2023\"\n  ..$ :List of 7\n  .. ..$ title      : chr \"Assessment of Regional Lung Ventilation Using Computer Tomography (CT) Lung Ventilation Analysis in Chronic Obs\"| __truncated__\n  .. ..$ link       : chr \"https://scholar.google.com/citations?view_op=view_citation&hl=en&user=sdB7YAkAAAAJ&citation_for_view=sdB7YAkAAAAJ:UeHWp8X0CEIC\"\n  .. ..$ citation_id: chr \"sdB7YAkAAAAJ:UeHWp8X0CEIC\"\n  .. ..$ authors    : chr \"D Karmali, M Dalzell, E Gonzalez, K Grealis, E Castillo, JP Kirkness, ...\"\n  .. ..$ publication: chr \"A108. NEW INSIGHTS INTO CHRONIC OBSTRUCTIVE PULMONARY DISEASE, A2699-A2699, 2023\"\n  .. ..$ cited_by   :List of 1\n  .. ..$ year       : chr \"2023\"\n  ..$ :List of 7\n  .. ..$ title      : chr \"Prevalence and Burden of PRISm in Population Cohorts From Three LMIC Settings\"\n  .. ..$ link       : chr \"https://scholar.google.com/citations?view_op=view_citation&hl=en&user=sdB7YAkAAAAJ&citation_for_view=sdB7YAkAAAAJ:2osOgNQ5qMEC\"\n  .. ..$ citation_id: chr \"sdB7YAkAAAAJ:2osOgNQ5qMEC\"\n  .. ..$ authors    : chr \"K Grealis, T Siddharthan, S Pollard, D Hossain, P Alupo, R Chandyo, ...\"\n  .. ..$ publication: chr \"C17. IN THIS TOGETHER: CONFRONTING ENVIRONMENTAL HEALTH CHALLENGES AROUND …, 2023\"\n  .. ..$ cited_by   :List of 1\n  .. ..$ year       : chr \"2023\"\n  ..$ :List of 7\n  .. ..$ title      : chr \"Accuracy and Reproducibility of Plethysmographic Thoracic Gas Volume Measurements in Healthy Subjects\"\n  .. ..$ link       : chr \"https://scholar.google.com/citations?view_op=view_citation&hl=en&user=sdB7YAkAAAAJ&citation_for_view=sdB7YAkAAAAJ:9yKSN-GCB0IC\"\n  .. ..$ citation_id: chr \"sdB7YAkAAAAJ:9yKSN-GCB0IC\"\n  .. ..$ authors    : chr \"T Siddharthan, M Dalzell, K Grealis, E Gonzalez, A Wanner\"\n  .. ..$ publication: chr \"A41. EMERGING CLINICAL AND TRANSLATIONAL RESEARCH IN COPD AND ALPHA-1 …, 2023\"\n  .. ..$ cited_by   :List of 1\n  .. ..$ year       : chr \"2023\"\n  ..$ :List of 7\n  .. ..$ title      : chr \"Normalizing Spirometric Bronchodilator Responses\"\n  .. ..$ link       : chr \"https://scholar.google.com/citations?view_op=view_citation&hl=en&user=sdB7YAkAAAAJ&citation_for_view=sdB7YAkAAAAJ:d1gkVwhDpl0C\"\n  .. ..$ citation_id: chr \"sdB7YAkAAAAJ:d1gkVwhDpl0C\"\n  .. ..$ authors    : chr \"A Alexis, K Grealis, NM Punjabi, A Wanner\"\n  .. ..$ publication: chr \"B30. BREATHE (IN THE AIR): STUDIES IN PULMONARY FUNCTION, A3002-A3002, 2023\"\n  .. ..$ cited_by   :List of 1\n  .. ..$ year       : chr \"2023\"\n```\n\n\n:::\n:::\n\n\nNow we have a lot of useful information. This already shows that I have contributed on 9 articles. Let's again use `pluck` to grab the title of the second article in the list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nauthor_response |>\n  resp_body_json() |>\n  pluck(\"articles\", 2, \"title\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Ventilation heterogeneity from X-ray Velocimetry predicts COPD severity\"\n```\n\n\n:::\n:::\n\n\nWhat if I wanted to calculate the number of articles? Just use the `length` function to return the length of the list:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nauthor_response |>\n  resp_body_json() |>\n  pluck(\"articles\") |>\n  length()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n:::\n\n\nBut what about my total number of citations? Unfortunately, as of this writing (February 13, 2024), none of my works have been cited...yet! So, instead, let's see how many times my mentor, Dr. Ray Balise, has been cited. Let's pipe everything together...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhis_id <- request(url) |>\n  req_url_query(\n    engine = \"google_scholar_profiles\",\n    mauthors = \"Raymond Balise\",\n    key = Sys.getenv(\"GOOGLE_KEY\")\n  ) |>\n  req_perform() |>\n  resp_body_json() |>\n  pluck(\"profiles\", 1, \"author_id\")\n\nhis_works <- request(url) |>\n  req_url_query(\n    engine = \"google_scholar_author\",\n    author_id = his_id,\n    key = Sys.getenv(\"GOOGLE_KEY\")\n  ) |>\n  req_perform() |>\n  resp_body_json()\n```\n:::\n\n\nDr. Balise's first listed article was cited 1522 times!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhis_works |>\n  pluck(\"articles\", 1, \"cited_by\", \"value\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1522\n```\n\n\n:::\n:::\n\n\nAnd if we use the `map_dbl` function from the `purrr` package, we can calculate the total number of citations for all of his works.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\n\ntotal_citations <- map_dbl(\n  his_works$articles, ~ .x$cited_by$value\n) |>\n  sum()\n```\n:::\n\n\nDr. Balise has been cited 4495 times!\n\n<hr>\n\n# Conclusion\n\nWe've learned how to create a secret key and access author information from Google Scholar. We've also learned how to use this key with some cool tools from the `httr2` package to access information about an author's publications and citations. We've also learned how to use the `purrr` package to calculate the total number of citations for an author's works. This is just the beginning of what you can do with the Serpapi API and the `httr2` package. I hope you've enjoyed this tutorial and that you'll be able to use this information to help you with your research and Shiny web design. Good luck!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}