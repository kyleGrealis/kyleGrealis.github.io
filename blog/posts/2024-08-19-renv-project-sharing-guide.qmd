---
title: "renv Project Setup and Sharing Guide"
image: /static/images/posts/renv-logo.png
author: Kyle Grealis
date: August 19, 2024
categories:
  - Data science
  - R
  - renv
format: 
  html:
    embed-resources: true
    code-fold: false
    code-copy: true
execute:
  warning: false
  message: false
  eval: false
---

[![](/static/images/posts/renv-logo.png)](https://rstudio.github.io/renv/articles/renv.html){target='_blank'}

## How this guide can be helpful

::: {.callout-note appearance="simple"}
While this guide was initially crafted for my team working on machine learning projects, the principles and steps outlined here are broadly applicable to any R-based data science project. Whether you're using RStudio, Positron, or another IDE, you may need to slightly adapt these instructions to fit your specific setup. The core concepts, however, remain the same across environments. ðŸ˜Š
:::

![](/static/images/posts/renv-flow.png)

In the ever-evolving landscape of data science and machine learning, maintaining reproducible environments is crucial yet often overlooked. This [`renv`](https://rstudio.github.io/renv/articles/renv.html){target='_blank'} project guide aims to streamline collaboration and ensure consistency across different systems and team members. It's not an exhaustive technical manual, nor does it delve into every possible scenario you might encounter. Instead, consider this a practical starting point, peppered with real-world tips I've gathered from navigating the choppy waters of project management and collaboration. My goal? To help you focus on what truly matters: unleashing your data science superpowers without getting bogged down by environment inconsistencies! Whether you're a solo data explorer or part of a larger team, these steps will set you on the path to smoother, more reproducible R projects.

## Project Structure
```
project_root/
â”œâ”€â”€ .Rproj.user/
â”œâ”€â”€ renv/
â”‚   â”œâ”€â”€ activate.R
â”‚   â”œâ”€â”€ library/
â”‚   â”œâ”€â”€ settings.json
â”‚   â””â”€â”€ .gitignore
â”œâ”€â”€ scripts/
â”‚   â”œâ”€â”€ script1.R
â”‚   â”œâ”€â”€ script2.R
â”‚   â”œâ”€â”€ script3.R
â”‚   â”œâ”€â”€ script4.R
â”‚   â””â”€â”€ script5.R
â”œâ”€â”€ .Rprofile
â”œâ”€â”€ .gitignore
â”œâ”€â”€ project_name.Rproj
â””â”€â”€ renv.lock
```

## For the Project Creator

1. Initialize the project:
   - Create a new R project or navigate to an existing project directory.
   - Open the project in RStudio or Positron.

2. Set up `renv`:
   - Run `install.packages("renv")` if not already installed.
   - Initialize `renv` by running:
     ```r
     renv::init()
     ```

3. Develop your project:
   - Create your R scripts (in this case, 5 main scripts).
   - Use `renv::install("package_name")` to add new packages as needed.

4. Capture the project state:
   - After finalizing your scripts, run:
     ```r
     renv::snapshot()
     ```
   - This creates/updates the `renv.lock` file with your project's dependencies.

5. Review the lockfile:
   - Open `renv.lock` and ensure all necessary packages are included.
   - If any are missing, install them with `renv::install()` and run `renv::snapshot()` again.

6. Prepare for sharing:
   - Ensure your project directory contains:
     - All R scripts
     - `.Rproj` file (not included if the project was created within Positron, so not needed)
     - `renv.lock` file
     - `.Rprofile` file (if present)
     - `renv/` directory

7. Share the project:
   - Compress the entire project directory.
   - Send the compressed file to your collaborator.

### Alternative option

If you have been working on non-`renv` activated project while conducting exploratory data analysis (EDA) or just tinkering with machine learning preprocessing recipes and modeling types, you can activate `renv` after your project is in a steady state. 

1. Set up `renv`:
   - Run `install.packages("renv")` if not already installed.
   - Initialize `renv` by running:
     ```r
     renv::init()
     ```
   - This will analyze your existing project and create an initial lockfile based on your current package usage. It examines the scripts you've written for the presence of any `library()` or `require()` calls and adds those packages.

2. Capture the project state:
   - After finalizing your scripts, run:
     ```r
     renv::snapshot()
     ```

3. Review the lockfile:
   - Open `renv.lock` and ensure all necessary packages are included.
   - NOTE: Using the `package::function()` method may cause `renv::snapshot()` to miss these packages.
   - If any are missing, install them with `renv::install()` and run `renv::snapshot()` again.

Proceed to share your project in its working, ready-to-share state.

## For the New User

1. Receive and extract the project:
   - Receive the compressed project directory from the creator.
   - Extract it to a desired location on your machine.

2. Set up R environment:
   - Install R and RStudio if not already installed.
   - Install `renv` by opening R/RStudio and running:
     ```r
     install.packages("renv")
     ```

3. Open the project:
   - Navigate to the extracted project directory.
   - Double-click the `.Rproj` file to open the project in RStudio.

4. Restore the project environment:
   - In the R console, run:
     ```r
     renv::restore()
     ```
   - This will install all necessary packages as specified in the `renv.lock` file.

5. Verify the setup:
   - Try running one of the scripts to ensure everything is working correctly.

6. Start working:
   - You now have an exact replica of the original project environment.
   - If you need to add new packages, use `renv::install()` followed by `renv::snapshot()`.

## Notes
- Always use `renv::install()` instead of `install.packages()` when adding new packages to an `renv` project.
- Run `renv::status()` periodically to check if your lockfile is in sync with your current project state.
- If you encounter issues, try running `renv::repair()` to fix inconsistencies.

By following these steps, both the project creator and the new user ensure a consistent, reproducible environment for the R project.

---

I hope this `renv` project guide proves valuable in streamlining your R project workflows and enhancing collaboration within your team. As someone who's grappled with dependency management headaches, I've found that testing these `renv` practices on personal projects before introducing them to the team can save a lot of collective frustration. Remember, using `renv` isn't just about managing packages - it's about creating a shared, reproducible environment that speaks to the core of collaborative data science.

When working with `renv`, think of your `renv.lock` file as a crucial piece of documentation: it tells the story of your project's exact environment. Just as you'd write clear git commit messages (not just "updated stuff" but "feat: added tidymodels for ML pipeline"), be intentional about when and why you update your lockfile. A well-maintained `renv` setup can be as informative as well-commented code!

This guide is, of course, a work in progress. As I explore more advanced `renv` features or discover new best practices in R project management, I'll update this post accordingly. If you've found clever ways to use `renv` in your data science projects or have tips for smoother collaboration using these tools, I'm all ears! 

Share your insights at [kylegrealis@icloud.com](mailto:kylegrealis@icloud.com). Together, we can make our R projects more robust, reproducible, and ready for collaboration!

[Happy coding!]{style='font-size: 1.5rem;'}

[~Kyle]{style='font-size: 1.5rem; font-weight: bold'}