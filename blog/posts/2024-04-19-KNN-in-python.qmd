---
title: "KNN"
format: html
embed-resources: true
---

Euclidean Distance between two points: $\sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}$

KNN is used to assign a new data point to a nearby cluster. One option is to measure the Euclidean distances of the new data point and existing data points and, using the predetermined *k* number of nearest neighbors, assign the new point to the cluster with $>k/2$ neighbors. 

## Import libraries

```{python}
import numpy as np
import pandas as pd
```

## Import dataset

```{python}
dataset = pd.read_csv('../data/Social_Network_Ads.csv')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values
```

## Splitting the dataset to training & testing
```{python}
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
  X, y,
  test_size=0.25,
  random_state=0
)
```

## Feature scaling

```{python}
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.fit_transform(X_test)
```

## Train & fit the KNN model

```{python}
from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(
  n_neighbors=5,  # default
  p=2,            # euclidean distance; default 
  metric='minkowski'
)
```

```{python}
classifier.fit(X_train, y_train)
```

## Predicting a new result

30y/o $87k/yr -- first observation of X_test

```{python}
person = X_test[[0]]
single_pred = classifier.predict(person)
single_prob = classifier.predict_proba(person)
print('1="Yes", 0="No"\n')
print(f'Single prediction for 30 y/o earning $87k/yr: {single_pred[0]} at a probability of {single_prob[0][0].round(3)}')
```

## Predicting the test set results

```{python}
y_pred = classifier.predict(X_test)
# print(np.concatenate(
#   (y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test), 1)), 1
# ))
```

## Creating the confusion matrix

```{python}
from sklearn.metrics import confusion_matrix, accuracy_score
print(confusion_matrix(y_test, y_pred))
print(f'Accuracy: {accuracy_score(y_test, y_pred)}')
```

## Visualizing the training set results

```{python}
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
X_set, y_set = sc.inverse_transform(X_train), y_train
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),
                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))
plt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)
plt.title('KNN Regression (Training set)')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()
plt.show()
```

## Visualizing the test set results

```{python}
from matplotlib.colors import ListedColormap
X_set, y_set = sc.inverse_transform(X_test), y_test
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 10, stop = X_set[:, 0].max() + 10, step = 0.25),
                     np.arange(start = X_set[:, 1].min() - 1000, stop = X_set[:, 1].max() + 1000, step = 0.25))
plt.contourf(X1, X2, classifier.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)
plt.title('KNN Regression (Test set)')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()
plt.show()
```


```{python}
# end
```