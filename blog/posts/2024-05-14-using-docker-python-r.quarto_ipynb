{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Setting Up a Python or R Project with Docker\"\n",
        "image: /static/images/posts/docker-logo.png\n",
        "author: \"Kyle Grealis\"\n",
        "date: May 14, 2024\n",
        "categories:\n",
        "  - Python\n",
        "  - R\n",
        "  - Docker\n",
        "  - Data science\n",
        "format: \n",
        "  html:\n",
        "    embed-resources: true\n",
        "    code-fold: false\n",
        "    code-copy: true\n",
        "execute:\n",
        "  warning: false\n",
        "  message: false\n",
        "  eval: false\n",
        "---\n",
        "\n",
        "\n",
        "![](/static/images/posts/docker-logo.png){width='70%'}\n",
        "\n",
        "This guide will walk you through the process of setting up a Python or R project with Docker. This is particularly useful for data science projects where you need to ensure that your code runs in a consistent environment.\n",
        "\n",
        "## Step 1: Organize Your Python Scripts\n",
        "\n",
        "Organize your Python scripts so that each script is responsible for a specific part of your project. For example:\n",
        "\n",
        "- `import_and_clean.py`: Responsible for importing and cleaning your data.\n",
        "- `explore.py`: Responsible for exploring your data (e.g., generating descriptive statistics, creating visualizations).\n",
        "- `modeling.py`: Responsible for building and evaluating your models.\n",
        "- `create_api.py`: Responsible for creating an API for your model (if applicable).\n",
        "\n",
        "## Step 2: Create a Main Script\n",
        "\n",
        "Create a main script that imports and runs the functions from your other scripts in the necessary order. For example:\n"
      ],
      "id": "583694e7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# main.py\n",
        "\n",
        "# Import the functions from your other scripts\n",
        "from import_and_clean import import_and_clean\n",
        "from explore import explore\n",
        "from modeling import modeling\n",
        "from create_api import create_api\n",
        "\n",
        "def main():\n",
        "    # Call the functions in the necessary order\n",
        "    import_and_clean()\n",
        "    explore()\n",
        "    modeling()\n",
        "    create_api()\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "id": "2db51899",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Step 3: Create a requirements.txt File\n",
        "\n",
        "Create a `requirements.txt` file that lists the Python packages your project depends on. You can generate it by running `pip freeze > requirements.txt` in your virtual environment.\n",
        "\n",
        "## Step 4: Create a Dockerfile\n",
        "\n",
        "Create a Dockerfile that sets up the environment for your project. Here's an example:\n",
        "\n",
        "\n",
        "```{bash}\n",
        "# Use an official Python runtime as a parent image\n",
        "FROM python:3.12-slim-buster\n",
        "\n",
        "# Set the working directory in the container to /app\n",
        "WORKDIR /app\n",
        "\n",
        "# Add the current directory contents into the container at /app\n",
        "ADD . /app\n",
        "\n",
        "# Install any needed packages specified in requirements.txt\n",
        "RUN pip install --no-cache-dir -r requirements.txt\n",
        "\n",
        "# Run main.py when the container launches\n",
        "CMD [\"python\", \"main.py\"]\n",
        "```\n",
        "\n",
        "\n",
        "## Step 5: Build and Run Your Docker Container\n",
        "\n",
        "To build the Docker image, run the following command in your project directory (the same directory where the Dockerfile is located):\n",
        "\n",
        "To run the Docker container, run the following command:\n",
        "\n",
        "\n",
        "```{bash}\n",
        "docker build -t your-image-name .\n",
        "```\n",
        "\n",
        "```{bash}\n",
        "docker run your-image-name\n",
        "```\n",
        "\n",
        "\n",
        "This will run your Python script in a Docker container with an environment that matches the one specified in your Dockerfile.\n",
        "\n",
        "## Step 6: If Building a project in R\n",
        "\n",
        "### Create a Dockerfile\n",
        "\n",
        "1. **Docker Base Image:** Instead of using a Python base image, you'd use an R base image. For example, you might use `FROM r-base:4.1.0` to use R version 4.1.0.\n",
        "    \n",
        "2. **Installing Packages:** Instead of using a `requirements.txt` file and `pip install`, you'd install R packages using the `install.packages()` function in R. You can do this directly in your Dockerfile. For example:\n",
        "\n",
        "\n",
        "```{bash}\n",
        "RUN R -e \"install.packages(c('dplyr', 'ggplot2'), repos='http://cran.rstudio.com/')\"\n",
        "```\n",
        "\n",
        "\n",
        "3. **Running Your Script:** Instead of running a Python script, you'd run an R script. For example:\n",
        "\n",
        "\n",
        "```{bash}\n",
        "CMD [\"Rscript\", \"your_script.R\"]\n",
        "```\n",
        "\n",
        "\n",
        "Here's what a full Dockerfile might look like for an R project:\n",
        "\n",
        "\n",
        "```{bash}\n",
        "# Use an official R runtime as a parent image\n",
        "FROM r-base:4.4.0\n",
        "\n",
        "# Set the working directory in the container to /app\n",
        "WORKDIR /app\n",
        "\n",
        "# Add the current directory contents into the container at /app\n",
        "ADD . /app\n",
        "\n",
        "# Install any needed packages\n",
        "RUN R -e \"install.packages(c('dplyr', 'ggplot2'), repos='http://cran.rstudio.com/')\"\n",
        "\n",
        "# Run your_script.R when the container launches\n",
        "CMD [\"Rscript\", \"your_script.R\"]\n",
        "```\n",
        "\n",
        "\n",
        "As with the Python example, if you have multiple R scripts that need to be run in a specific order, you can create a main R script that sources and runs your other scripts in the necessary order, and call that script in the `CMD` line.\n",
        "\n",
        "Share your insights at [kylegrealis@icloud.com](mailto:kylegrealis@icloud.com). Together, we can make our R projects more robust, reproducible, and ready for collaboration!\n",
        "\n",
        "[Happy coding!]{style='font-size: 1.5rem;'}\n",
        "\n",
        "[~Kyle]{style='font-size: 1.5rem; font-weight: bold'}"
      ],
      "id": "bced1b73"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/usr/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}